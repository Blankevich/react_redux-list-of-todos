{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","api.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","playload","initialState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoItem","dispatch","IscurrentTodo","id","className","ClassNames","completed","title","onClick","TodoList","length","map","TodoFilter","onSubmit","event","preventDefault","value","onChange","filterAction","target","placeholder","style","pointerEvents","Loader","TodoModal","useState","user","setUser","setTodo","useEffect","userId","href","email","name","App","isLoading","setIsLoading","response","TodoActions","filteredTodos","filterTitle","toLowerCase","includes","Root","ReactDOM","render","document","getElementById"],"mappings":"mOAoBaA,EANG,SAACC,GAAD,MAAgC,CAC9CC,KAAM,kBACNC,QAASF,IAIED,EARM,iBAAyB,CAAEE,KAAM,uBA4BrCE,EAfY,WAGd,IAFXC,EAEU,uDAFK,KACfC,EACU,uCACV,OAAQA,EAAOJ,MACb,IAAK,kBACH,OAAOI,EAAOH,QAChB,IAAK,qBACH,OAAO,KAET,QACE,OAAOE,I,OCTAL,EAZI,SAACO,GAAD,MACf,CACEL,KAAM,eACNC,QAASI,IASAP,EALK,SAACQ,GAAD,MAAmC,CACnDN,KAAM,gBACNO,SAAUD,IAKNE,EAAe,CACnBH,MAAO,GACPC,OAAQ,OAyBKG,EAtBO,WAGhB,IAFJN,EAEG,uDAFKK,EACRJ,EACG,uCACH,OAAQA,EAAOJ,MACb,IAAK,eACH,OAAO,2BACFG,GADL,IAEEE,MAAOD,EAAOH,UAGlB,IAAK,gBACH,OAAO,2BACFE,GADL,IAEEG,OAAQF,EAAOG,WAGnB,QACE,OAAOJ,ICxCAL,EALG,SAACY,GAAD,MAAgC,CAC9CV,KAAM,YACNO,SAAUG,IAiBGC,EAZM,WAGP,IAFZR,EAEW,uDAFK,GAChBC,EACW,uCACX,MACO,cADCA,EAAOJ,KAEJI,EAAOG,SAEPJ,GCdPS,EAAcC,0BAAgB,CAClCC,YAAaZ,EACba,OAAQN,EACRC,MAAOC,IAIIK,EAAQC,sBACnBL,EACAM,8BACEC,0BAAgBC,O,cCfPC,G,YAAoCC,KACpCC,EAAkDC,ICQ/D,SAASC,EAAOC,GAEd,IARYC,EAQNC,EAVS,iEAUYF,EAAM,QAEjC,OAVYC,EAUA,IATL,IAAIE,SAAQ,SAAAC,GACjBC,WAAWD,EAASH,OASnBK,MAAK,kBAAMC,MAAML,MACjBI,MAAK,SAAAE,GAAG,OAAIA,EAAIC,UAGd,I,wBCZMC,EAA4B,SAAC,GAAc,IAAZrC,EAAW,EAAXA,KACpCsC,EAAWhB,IAEXiB,EAAgBf,GAAe,SAAApB,GAAK,aACxCJ,EAAKwC,MAAL,UAAYpC,EAAMW,mBAAlB,aAAY,EAAmByB,OAGjC,OACE,qBACE,UAAQ,OACRC,UAAWC,IAAW,CAAE,4BAA6BH,IAFvD,UAIE,oBAAIE,UAAU,eAAd,SAA8BzC,EAAKwC,KACnC,oBAAIC,UAAU,eAAd,SACGzC,EAAK2C,WACJ,sBAAMF,UAAU,OAAO,UAAQ,gBAA/B,SACE,mBAAGA,UAAU,qBAKnB,oBAAIA,UAAU,2BAAd,SACE,mBAAGA,UAAWzC,EAAK2C,UACf,mBACA,kBAFJ,SAIG3C,EAAK4C,UAIV,oBAAIH,UAAU,8BAAd,SACE,wBACE,UAAQ,eACRA,UAAU,SACVxC,KAAK,SACL4C,QAAS,kBAAMP,EAASvB,EAAoBf,KAJ9C,SAME,sBAAMyC,UAAU,OAAhB,SACE,mBACEA,UAAWC,IAAW,MACpBH,EACI,eACA,sBC1CPO,EAA4B,SAAC,GAAe,IAAbnC,EAAY,EAAZA,MAC1C,OACE,mCACoB,IAAjBA,EAAMoC,OAEH,mBAAGN,UAAU,0BAAb,iEAKA,wBAAOA,UAAU,+BAAjB,UACE,gCACE,+BACE,mCAEA,6BACE,sBAAMA,UAAU,OAAhB,SACE,mBAAGA,UAAU,qBAIjB,uCACA,wCAIJ,gCACG9B,EAAMqC,KAAI,SAAAhD,GAAI,OACb,cAAC,EAAD,CAAUA,KAAMA,GAAWA,EAAKwC,eC/BnCS,EAAuB,WAClC,IAAMX,EAAWhB,IACXhB,EAAQkB,GAAe,SAAApB,GAAK,OAAIA,EAAMY,OAAOV,SAC7CC,EAASiB,GAAe,SAAApB,GAAK,OAAIA,EAAMY,OAAOT,UAMpD,OACE,uBACEkC,UAAU,mBACVS,SAAU,SAAAC,GAAK,OAAIA,EAAMC,kBAF3B,UAIE,mBAAGX,UAAU,UAAb,SACE,sBAAMA,UAAU,SAAhB,SACE,yBACE,UAAQ,eACRY,MAAO9C,EACP+C,SAAU,SAAAH,GACRb,EAASiB,EAAuBJ,EAAMK,OAAOH,SAJjD,UAOE,wBAAQA,MAAM,MAAd,iBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,YAAd,8BAKN,oBAAGZ,UAAU,qDAAb,UACE,uBACE,UAAQ,cACRxC,KAAK,OACLwC,UAAU,QACVgB,YAAY,YACZJ,MAAO/C,EACPgD,SAAU,SAAAH,GACRb,EAASiB,EAAsBJ,EAAMK,OAAOH,WAGhD,sBAAMZ,UAAU,eAAhB,SACE,mBAAGA,UAAU,8BAGf,sBAAMA,UAAU,gBAAgBiB,MAAO,CAAEC,cAAe,OAAxD,SAEE,wBACE,UAAQ,oBACR1D,KAAK,SACLwC,UAAU,SACVI,QAAS,kBAAMP,EAASiB,EAAsB,iBCtD7CK,G,MAAmB,kBAC9B,qBAAKnB,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,wBCENoB,EAAsB,WACjC,MAAwBC,mBAAsB,MAA9C,mBAAOC,EAAP,KAAaC,EAAb,KACM1B,EAAWhB,IACX2C,EAAUzC,GAAe,SAAApB,GAAK,OAAIA,EAAMW,eAQ9C,OANAmD,qBAAU,WLWW,IAACC,EKVhBF,ILUgBE,EKTVF,EAAQzB,GLSqBd,EAAG,iBAAiByC,KKTrClC,KAAK+B,KAE1B,CAACC,IAGF,sBAAKxB,UAAU,kBAAkB,UAAQ,QAAzC,UACE,qBAAKA,UAAU,qBACdsB,EAEG,sBAAKtB,UAAU,aAAf,UACE,yBAAQA,UAAU,kBAAlB,UACE,qBACEA,UAAU,0CACV,UAAQ,eAFV,gCAIYwB,QAJZ,IAIYA,OAJZ,EAIYA,EAASzB,MAErB,wBACE,aAAW,QACXvC,KAAK,SACLwC,UAAU,SACV,UAAQ,cACRI,QAAS,kBAAMP,EAASvB,WAG5B,sBAAK0B,UAAU,kBAAf,UACE,mBACEA,UAAU,QACV,UAAQ,cAFV,gBAIGwB,QAJH,IAIGA,OAJH,EAIGA,EAASrB,QAEZ,oBAAGH,UAAU,QAAQ,UAAQ,aAA7B,UACU,OAAPwB,QAAO,IAAPA,KAAStB,UAEN,wBAAQF,UAAU,mBAAlB,kBAKA,wBAAQA,UAAU,kBAAlB,qBAIH,OACD,mBAAG2B,KAAI,iBAAYL,EAAKM,OAAxB,SACGN,EAAKO,gBAMb,cAAC,EAAD,QCnDEC,EAAgB,WAC3B,MAAkCT,oBAAS,GAA3C,mBAAOU,EAAP,KAAkBC,EAAlB,KACMnC,EAAWf,cACXR,EAAcS,GAAe,SAACpB,GAAD,OAAWA,EAAMW,eAEpDmD,qBAAU,WACRO,GAAa,GNAa/C,EAAY,UMGnCO,MAAK,SAACyC,GACLpC,EAASqC,EAAoBD,SAEhC,IAEH,IAuBME,EAAgBpD,GAvBF,SAACpB,GACnB,IAAQO,EAAUP,EAAVO,MACR,EAA0BP,EAAMY,OAAxBT,EAAR,EAAQA,OAAQD,EAAhB,EAAgBA,MAEhB,OAAOK,EAAMK,QAAO,SAAAhB,GAClB,IAAQ4C,EAAqB5C,EAArB4C,MAAOD,EAAc3C,EAAd2C,UACTkC,EAAcjC,EACjBkC,cACAC,SAASzE,EAAMwE,eAElB,OAAQvE,GACN,IAAK,MACH,OAAOsE,EACT,IAAK,SACH,OAAOA,IAAgBlC,EACzB,IAAK,YACH,OAAOkC,GAAelC,EACxB,QACE,OAAO,SAOf,OACE,qCACE,qBAAKF,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,oBAEA,qBAAKA,UAAU,QAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,QAAf,SACI+B,EAEG,cAAC,EAAD,CAAU7D,MAAOiE,IADjB,cAAC,EAAD,aAOZ7D,GACC,cAAC,EAAD,QClEFiE,EAAO,kBACX,cAAC,IAAD,CAAU/D,MAAOA,EAAjB,SACE,cAAC,IAAD,UACE,cAAC,EAAD,SAKNgE,IAASC,OAAO,cAAC,EAAD,IAAUC,SAASC,eAAe,W","file":"static/js/main.4e8d6dd2.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n// export const actions = { /* put action creators here */};\n\ntype QueryAction = {\n  type: 'filter/Query';\n  payload: string;\n};\n\ntype FilterAction = {\n  type: 'filter/Filter'\n  playload: Status\n};\n\ntype Actions = QueryAction | FilterAction;\n\nconst SetQuery = (query: string): QueryAction => (\n  {\n    type: 'filter/Query',\n    payload: query,\n  }\n);\n\nconst SetFilter = (status: Status): FilterAction => ({\n  type: 'filter/Filter',\n  playload: status,\n});\n\nexport const actions = { SetQuery, SetFilter };\n\nconst initialState = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state = initialState,\n  action: Actions,\n) => {\n  switch (action.type) {\n    case 'filter/Query':\n      return {\n        ...state,\n        query: action.payload,\n      };\n\n    case 'filter/Filter':\n      return {\n        ...state,\n        status: action.playload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype TodoAction = {\n  type: 'todo/Todo',\n  playload: Todo[]\n};\n\nconst SetTodo = (todos: Todo[]): TodoAction => ({\n  type: 'todo/Todo',\n  playload: todos,\n});\n\nexport const actions = { SetTodo };\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: TodoAction,\n): Todo[] => {\n  switch (action.type) {\n    case 'todo/Todo':\n      return action.playload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import ClassNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodo } from '../../features/currentTodo';\n\ninterface Props {\n  todo: Todo,\n}\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const dispatch = useAppDispatch();\n\n  const IscurrentTodo = useAppSelector(state => (\n    todo.id === state.currentTodo?.id\n  ));\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className={ClassNames({ 'has-background-info-light': IscurrentTodo })}\n    >\n      <td className=\"is-vcentered\">{todo.id}</td>\n      <td className=\"is-vcentered\">\n        {todo.completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p className={todo.completed\n          ? 'has-text-success'\n          : 'has-text-danger'}\n        >\n          {todo.title}\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => dispatch(currentTodo.setTodo(todo))}\n        >\n          <span className=\"icon\">\n            <i\n              className={ClassNames('far',\n                IscurrentTodo\n                  ? 'fa-eye-slash'\n                  : 'fa-eye')}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\n\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ntype Props = {\n  todos: Todo[],\n};\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <>\n      {todos.length === 0\n        ? (\n          <p className=\"notification is-warning\">\n            There are no todos matching current filter criteria\n          </p>\n        )\n        : (\n          <table className=\"table is-narrow is-fullwidth\">\n            <thead>\n              <tr>\n                <th>#</th>\n\n                <th>\n                  <span className=\"icon\">\n                    <i className=\"fas fa-check\" />\n                  </span>\n                </th>\n\n                <th>Title</th>\n                <th> </th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {todos.map(todo => (\n                <TodoItem todo={todo} key={todo.id} />\n              ))}\n            </tbody>\n          </table>\n        )}\n    </>\n  );\n};\n","import React from 'react';\n// import { useDispatch } from 'react-redux';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterAction } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const query = useAppSelector(state => state.filter.query);\n  const status = useAppSelector(state => state.filter.status);\n\n  // const addSetQuey = (value: string) => dispatch(filterAction.SetQuery(value));\n  // const addSetFilter\n  // = (value: Status) => dispatch(filterAction.SetFilter(value));\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={event => {\n              dispatch(filterAction.SetFilter(event.target.value as Status));\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={event => {\n            dispatch(filterAction.SetQuery(event.target.value));\n          }}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={() => dispatch(filterAction.SetQuery(''))}\n          />\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { actions as currentTodo } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>(null);\n  const dispatch = useAppDispatch();\n  const setTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    if (setTodo) {\n      getUser(setTodo.id).then(setUser);\n    }\n  }, [setTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {user\n        ? (\n          <div className=\"modal-card\">\n            <header className=\"modal-card-head\">\n              <div\n                className=\"modal-card-title has-text-weight-medium\"\n                data-cy=\"modal-header\"\n              >\n                {`Todo #${setTodo?.id}`}\n              </div>\n              <button\n                aria-label=\"close\"\n                type=\"button\"\n                className=\"delete\"\n                data-cy=\"modal-close\"\n                onClick={() => dispatch(currentTodo.removeTodo())}\n              />\n            </header>\n            <div className=\"modal-card-body\">\n              <p\n                className=\"block\"\n                data-cy=\"modal-title\"\n              >\n                {setTodo?.title}\n              </p>\n              <p className=\"block\" data-cy=\"modal-user\">\n                {setTodo?.completed\n                  ? (\n                    <strong className=\"has-text-success\">\n                      Done\n                    </strong>\n                  )\n                  : (\n                    <strong className=\"has-text-danger\">\n                      Planned\n                    </strong>\n                  )}\n                {' by '}\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            </div>\n          </div>\n        )\n        : (<Loader />)}\n    </div>\n\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from './app/hooks';\nimport { RootState } from './app/store';\nimport { actions as TodoActions } from './features/todos';\nimport { getTodos } from './api';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useDispatch();\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then((response) => {\n        dispatch(TodoActions.SetTodo(response));\n      });\n  }, []);\n\n  const filterTodos = (state: RootState) => {\n    const { todos } = state;\n    const { status, query } = state.filter;\n\n    return todos.filter(todo => {\n      const { title, completed } = todo;\n      const filterTitle = title\n        .toLowerCase()\n        .includes(query.toLowerCase());\n\n      switch (status) {\n        case 'all':\n          return filterTitle;\n        case 'active':\n          return filterTitle && !completed;\n        case 'completed':\n          return filterTitle && completed;\n        default:\n          return true;\n      }\n    });\n  };\n\n  const filteredTodos = useAppSelector(filterTodos);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {!isLoading\n                ? (<Loader />)\n                : (<TodoList todos={filteredTodos} />)}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (\n        <TodoModal />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}